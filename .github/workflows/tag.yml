name: Build/Push (tag)

on:
  push:
    branches: [ ci ]
  pull_request:
    branches: [ ci ]
#on:
#  push:
#    tags:
#      - '*'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go_version: [ '1.12', '1.13', '1.14' ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go_version }}
      - run: go get -t -v ./...
      - run: go test -v -race ./...

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v2

    - uses: azure/docker-login@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up docker buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        buildx-version: latest
        qemu-version: latest

    - name: Docker buildx available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Get the version
      id: get_version
      run: echo ::set-output name=TAG_NAME::${GITHUB_REF/refs\/tags\//}

    - name: Run docker buildx build
      run: |
        docker buildx build \
          --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64 \
          --output=type=registry \
          --tag ekofr/pihole-exporter:${{ steps.get_version.outputs.TAG_NAME }} \
          .

  release:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Create release
        id: create
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

  push:
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        include:
          - os: linux
            arch: 386
          - os: linux
            arch: amd64
          - os: linux
            arch: arm
          - os: darwin
            arch: 386
          - os: darwin
            arch: amd64
          - os: windows
            arch: 386
          - os: windows
            arch: amd64
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.14
      - run: go get -t -v ./...

      - run: go install github.com/mitchellh/gox
      - run: gox -ldflags "-s -w" -os="${{ matrix.os }}" -arch="${{ matrix.arch }}" -output="pihole_exporter-{{.OS}}-{{.Arch}}"  -verbose ./...

      - name: Upload release assets
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create.outputs.upload_url }}
          asset_path: ./pihole_exporter-${{ matrix.os }}-${{ matrix.arch }}
          asset_name: pihole_exporter-${{ matrix.os }}-${{ matrix.arch }}
          asset_content_type: application/octet-stream
